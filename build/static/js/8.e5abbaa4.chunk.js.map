{"version":3,"sources":["models/public.js","services/request.js","config/uri.js","assets/images/bg.png","components/Captcha.jsx","views/login/NormalLogin.jsx","views/login/MobileLogin.jsx","views/login/Index.jsx"],"names":["model","normalLogin","params","axios","post","uri","NormalLogin","verifyCaptcha","VerifyCaptcha","sendSMS","SendSMSCode","smsLogin","SmsLogin","preCheckJwt","get","preCheck","getAdminInfo","adminInfo","interceptors","request","use","cfg","jwt","sessionStorage","getItem","headers","Authorization","response","res","data","context","setItem","prefix","userList","userPie","Captcha","state","base64","height","width","src","this","props","h","w","onClick","loadCaptcha","bind","alt","then","img","setState","setKey","key","Component","onFinish","values","errNo","message","success","history","push","capRef","current","error","errText","createRef","name","wrapperCol","span","initialValues","remember","onFinishFailed","autoComplete","Item","rules","required","placeholder","UserOutlined","Password","LockOutlined","SafetyOutlined","style","marginRight","ref","type","htmlType","withRouter","MobileLogin","time","canClick","requestId","mobRef","imgRef","maxLength","disabled","getCode","block","mobile","value","captcha","test","token","ret","timedown","setTimeout","Index","defaultTab","Container","LoginForm","centered","activeKey","onChange","changeTab","TabPane","tab","styled","div","bg"],"mappings":"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","file":"static/js/8.e5abbaa4.chunk.js","sourcesContent":["// 公共的模型文件\r\n// 作用：将对请求获取到的数据进行处理，使得原本应该写在组件中的代码转到这里，这样的话组件更加干净\r\n\r\n// 导入成员\r\nimport axios from \"@/services/request\";\r\nimport uri from \"@/config/uri\";\r\n\r\n// 定义模型中的方法\r\nconst model = {\r\n    // 常规登录方法\r\n    normalLogin(params) {\r\n        return axios.post(uri.NormalLogin, params);\r\n    },\r\n    // 图形验证码的验证\r\n    verifyCaptcha(params) {\r\n        return axios.post(uri.VerifyCaptcha, params);\r\n    },\r\n    // 短信获取\r\n    sendSMS(params) {\r\n        return axios.post(uri.SendSMSCode, params);\r\n    },\r\n    // 短信登录\r\n    smsLogin(params) {\r\n        return axios.post(uri.SmsLogin, params);\r\n    },\r\n    // jwt预检\r\n    preCheckJwt() {\r\n        return axios.get(uri.preCheck);\r\n    },\r\n    // 获取管理员信息\r\n    getAdminInfo() {\r\n        return axios.get(uri.adminInfo);\r\n    },\r\n};\r\n\r\nexport default model;\r\n","// 做网络请求发送的\r\nimport axios from \"axios\";\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use((cfg) => {\r\n    // 获取jwt\r\n    let jwt = sessionStorage.getItem(\"jwt\");\r\n    if (jwt) {\r\n        cfg.headers.Authorization = jwt;\r\n    }\r\n    return cfg;\r\n});\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use((res) => {\r\n    // 存token\r\n    if (res.data.context && res.data.context.jwt) {\r\n        sessionStorage.setItem(\"jwt\", res.data.context.jwt);\r\n    }\r\n    return res;\r\n});\r\n\r\n// 导出axios\r\nexport default axios;\r\n","let prefix = \"https://reactapi.iynn.cn\";\r\n\r\nconst uri = {\r\n    // 密码登录\r\n    NormalLogin: prefix + \"/api/common/auth/login\",\r\n    // 验证图形验证码\r\n    VerifyCaptcha: prefix + \"/api/common/captcha/verify\",\r\n    // 短信下发\r\n    SendSMSCode: prefix + \"/api/common/sms/send\",\r\n    // 短信登录\r\n    SmsLogin: prefix + \"/api/common/auth/mobile\",\r\n    // 验证jwt\r\n    preCheck: prefix + \"/api/common/auth/jwtPreCheck\",\r\n    // 管理员信息获取\r\n    adminInfo: prefix + \"/api/common/auth/adminInfo\",\r\n    // 用户模块，用户列表\r\n    userList: prefix + \"/api/users\",\r\n    // 用户模块，统计用户\r\n    userPie: prefix + \"/api/users/statistics/getData\",\r\n    // ...\r\n};\r\n\r\n// 地址声明\r\nexport default uri;\r\n","export default __webpack_public_path__ + \"static/media/bg.31d3eb52.png\";","// 封装组件：验证码组件\r\n\r\n// 封装意义：复用\r\n// 注意事项：\r\n// 1. 对于组件的封装，要考虑可移植性（开箱即用），所以本次封装的组件中涉及到的网络请求地址不建议走config/uri.js中去读取地址，建议写死。\r\n// 2. 图形验证码调用地址去获取，返回数据有三个：\r\n//      sensitive：对于大小写是否敏感\r\n//      key：唯一凭证，在验证时需要传递给服务器\r\n//      img：图形的base64的值\r\n// 3. 适配表单的宽高\r\n// 4. key的保存（父存，子传父）\r\n//       - 父组件在调用验证码的时候，传递一个方法，子调用并且传入key\r\n//       - 父组件在调用验证码的时候，使用ref对象绑定子组件，然后调用子的方法获取key值\r\n// 5. 以方案1为例，此处约定一个方法名称（对于父来讲就是一个属性名）：setKey\r\n\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Captcha extends Component {\r\n    state = {\r\n        base64: \"\", // 图片默认的base64的值\r\n        height: 36, // 验证码默认的高度\r\n        width: 120, // 验证码默认的宽度\r\n    };\r\n    render() {\r\n        return (\r\n            <>\r\n                <img\r\n                    src={this.state.base64}\r\n                    height={this.props.h ? this.props.h : this.state.height}\r\n                    width={this.props.w ? this.props.w : this.state.width}\r\n                    onClick={this.loadCaptcha.bind(this)}\r\n                    alt=\"点击刷新验证码\"\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    // 发起网络请求\r\n    componentDidMount() {\r\n        // 调用发起请求的方法\r\n        this.loadCaptcha();\r\n    }\r\n\r\n    // 请求验证码\r\n    loadCaptcha() {\r\n        let url = \"https://reactapi.iynn.cn/captcha/api/math\";\r\n        axios.get(url).then((res) => {\r\n            if (res.data.img) {\r\n                this.setState({\r\n                    base64: res.data.img,\r\n                });\r\n                // 调用父传递来的setKey方法获取验证码的key值\r\n                this.props.setKey(res.data.key);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Captcha;\r\n","// 常规登录组件，输入用户名和密码\r\nimport React, { Component, createRef } from \"react\";\r\nimport { Form, Input, Button, message } from \"antd\";\r\nimport { UserOutlined, LockOutlined, SafetyOutlined } from \"@ant-design/icons\";\r\nimport Captcha from \"@/components/Captcha\";\r\n// 导入模型\r\nimport model from \"@/models/public\";\r\nimport { withRouter } from \"react-router-dom\";\r\nclass NormalLogin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.capRef = createRef();\r\n    }\r\n    state = {\r\n        key: \"\"\r\n    };\r\n    render() {\r\n        return (\r\n            <Form\r\n                name=\"basic\"\r\n                wrapperCol={{\r\n                    span: 24,\r\n                }}\r\n                initialValues={{\r\n                    remember: true,\r\n                }}\r\n                onFinish={this.onFinish}\r\n                onFinishFailed={this.onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    name=\"username\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入用户名！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input placeholder=\"用户名\" prefix={<UserOutlined />} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"password\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入密码！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input.Password placeholder=\"密码\" prefix={<LockOutlined />} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"captcha\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入验证码！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <div>\r\n                        <Input placeholder=\"验证码\" prefix={<SafetyOutlined />} style={{ width: \"50%\", marginRight: \"5px\" }} />\r\n                        <Captcha ref={this.capRef} h=\"32\" setKey={this.setKey.bind(this)} />\r\n                    </div>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        span: 24,\r\n                    }}\r\n                >\r\n                    <Button type=\"primary\" style={{ width: \"100%\" }} htmlType=\"submit\">\r\n                        立即登录\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n    // 表单验证成功的回调\r\n    onFinish = (values) => {\r\n        // 发登录请求\r\n        values[\"key\"] = this.state.key;\r\n        model.normalLogin(values).then((res) => {\r\n            if (res.data.errNo === 0) {\r\n                message.success(\"登录成功！\", () => {\r\n                    // 注意this指向问题\r\n                    this.props.history.push(\"/admin/dashboard\");\r\n                });\r\n            } else {\r\n                // 刷新验证码\r\n                this.capRef.current.loadCaptcha();\r\n                message.error(res.data.errText);\r\n            }\r\n        });\r\n    };\r\n    // 获取验证码图片的key值\r\n    setKey(key) {\r\n        // 将key值保存在组件中\r\n        this.setState({\r\n            key,\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(NormalLogin);\r\n","// 短信登录组件，输入手机号和短信验证码\r\nimport React, { Component, createRef } from \"react\";\r\nimport { Form, Input, Button, message } from \"antd\";\r\nimport { UserOutlined, LockOutlined, SafetyOutlined } from \"@ant-design/icons\";\r\nimport Captcha from \"@/components/Captcha\";\r\n// 导入模型\r\nimport model from \"@/models/public\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass MobileLogin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.capRef = createRef();\r\n        // 非受控组件实现手机号与验证码值的先行获取\r\n        this.mobRef = createRef(); // 手机号\r\n        this.imgRef = createRef(); // 图形验证码的输入框\r\n    }\r\n    state = {\r\n        key: \"\",\r\n        time: 60, // 倒计时的时长，单位s\r\n        canClick: true, // 默认是否可以被点击\r\n    };\r\n    render() {\r\n        return (\r\n            <Form\r\n                name=\"basic\"\r\n                wrapperCol={{\r\n                    span: 24,\r\n                }}\r\n                initialValues={{\r\n                    remember: true,\r\n                }}\r\n                onFinish={this.onFinish}\r\n                onFinishFailed={this.onFinishFailed}\r\n                autoComplete=\"off\"\r\n            >\r\n                <Form.Item\r\n                    name=\"mobile\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入手机号！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Input ref={this.mobRef} maxLength=\"11\" placeholder=\"手机号\" prefix={<UserOutlined />} />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"captcha\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入验证码！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <div>\r\n                        <Input placeholder=\"验证码\" prefix={<SafetyOutlined />} ref={this.imgRef} style={{ width: \"50%\", marginRight: \"5px\" }} />\r\n                        <Captcha ref={this.capRef} h=\"32\" setKey={this.setKey.bind(this)} />\r\n                    </div>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name=\"code\"\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: \"请输入短信验证码！\",\r\n                        },\r\n                    ]}\r\n                >\r\n                    <div>\r\n                        <Input maxLength=\"6\" placeholder=\"短信验证码\" prefix={<LockOutlined />} style={{ width: \"50%\", marginRight: \"5px\" }} />\r\n                        <Button style={{ width: \"48%\" }} type=\"primary\" disabled={!this.state.canClick} onClick={this.getCode.bind(this)}>\r\n                            {this.state.canClick ? \"获取验证码\" : `重新获取（${this.state.time}s）`}\r\n                        </Button>\r\n                    </div>\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    wrapperCol={{\r\n                        span: 24,\r\n                    }}\r\n                >\r\n                    {/* 要想按钮100%宽度，除了给style属性外，还支持使用block属性，表示让按钮与父级一样宽度 */}\r\n                    <Button type=\"primary\" block htmlType=\"submit\">\r\n                        立即登录\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n    // 表单验证成功的回调\r\n    onFinish = (values) => {\r\n        // 发登录请求\r\n        values[\"requestId\"] = this.state.requestId;\r\n        model.smsLogin(values).then((res) => {\r\n            if (res.data.errNo === 0) {\r\n                message.success(\"登录成功！\", () => {\r\n                    // 注意this指向问题\r\n                    this.props.history.push(\"/admin/dashboard\");\r\n                });\r\n            } else {\r\n                // 刷新验证码\r\n                this.capRef.current.loadCaptcha();\r\n                message.error(res.data.errText);\r\n            }\r\n        });\r\n    };\r\n    // 获取验证码图片的key值\r\n    setKey(key) {\r\n        // 将key值保存在组件中\r\n        this.setState({\r\n            key,\r\n        });\r\n    }\r\n\r\n    // 获取短信验证码\r\n    getCode() {\r\n        // 获取手机号和图形验证码的值\r\n        let mobile = this.mobRef.current.props.value;\r\n        let captcha = this.imgRef.current.state.value;\r\n        if (/^1[3-9]\\d{9}$/.test(mobile)) {\r\n            // 继续验证码图形码\r\n            if (captcha !== \"\") {\r\n                // 校验图形验证码\r\n                model\r\n                    .verifyCaptcha({\r\n                        key: this.state.key,\r\n                        captcha: captcha,\r\n                    })\r\n                    .then((res) => {\r\n                        // 判断图形验证码是否正确\r\n                        if (res.data.errNo === 0) {\r\n                            // 获取短信验证码\r\n                            model\r\n                                .sendSMS({\r\n                                    token: res.data.context.token,\r\n                                    mobile: mobile,\r\n                                    type: 0,\r\n                                })\r\n                                .then((ret) => {\r\n                                    // 判断是否发送成功\r\n                                    if (ret.data.errNo === 0) {\r\n                                        // 发送成功\r\n                                        this.setState({\r\n                                            requestId: ret.data.requestId,\r\n                                        });\r\n                                        // 开始倒计时\r\n                                        this.timedown();\r\n                                        message.success(\"短信发送成功！\");\r\n                                    } else {\r\n                                        message.error(\"短信发送失败！\");\r\n                                        this.capRef.current.loadCaptcha();\r\n                                    }\r\n                                });\r\n                        } else {\r\n                            message.error(\"请输入正确的图形验证码！\");\r\n                            // 刷新验证码\r\n                            this.capRef.current.loadCaptcha();\r\n                        }\r\n                    });\r\n            } else {\r\n                message.error(\"请输入图形验证码！\");\r\n            }\r\n        } else {\r\n            message.error(\"请输入正确的手机号！\");\r\n        }\r\n    }\r\n\r\n    //  倒计时\r\n    timedown() {\r\n        if (this.state.time === 1) {\r\n            // 倒计时已经结束\r\n            this.setState({\r\n                time: 60,\r\n                canClick: true,\r\n            });\r\n        } else {\r\n            // 倒计时没有结束\r\n            this.setState({\r\n                time: this.state.time - 1,\r\n                canClick: false,\r\n            });\r\n            // 定时器\r\n            setTimeout(() => {\r\n                this.timedown();\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\n\r\nexport default withRouter(MobileLogin);\r\n","// 该组件为登录操作的主要组件，显示上包含了普通登录与短信登录\r\nimport React, { Component } from \"react\";\r\n// 如果样式不需要复用，直接写在组件内，如果需要复用，建议单独写.js文件\r\nimport styled from \"styled-components\";\r\nimport { Card, Tabs } from \"antd\";\r\nimport bg from \"@/assets/images/bg.png\";\r\n// 导入需要的表单组件\r\nimport NormalLogin from \"./NormalLogin\";\r\nimport MobileLogin from \"./MobileLogin\";\r\nclass Index extends Component {\r\n    state = {\r\n        // 默认选择的登录方式，0=常规登录，1=短信登录\r\n        defaultTab: \"0\",\r\n    };\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <LoginForm>\r\n                    <Card style={{ width: 300 }}>\r\n                        <Tabs type=\"card\" centered activeKey={this.state.defaultTab} onChange={this.changeTab.bind(this)}>\r\n                            <Tabs.TabPane tab=\"密码登录\" key=\"0\">\r\n                                <NormalLogin />\r\n                            </Tabs.TabPane>\r\n                            <Tabs.TabPane tab=\"短信登录\" key=\"1\">\r\n                                <MobileLogin />\r\n                            </Tabs.TabPane>\r\n                        </Tabs>\r\n                    </Card>\r\n                </LoginForm>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    // 改变tab的回调\r\n    changeTab(activeKey) {\r\n        this.setState({\r\n            defaultTab: activeKey,\r\n        });\r\n        // 此处应该刷新验证码...\r\n    }\r\n}\r\n\r\n// 样式\r\n// 大容器\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    background: url(${bg});\r\n    background-size: 100%;\r\n    position: fixed;\r\n`;\r\n\r\n// 登录窗口容器\r\nconst LoginForm = styled.div`\r\n    width: 300px;\r\n    margin: 16% auto;\r\n`;\r\n\r\nexport default Index;\r\n"],"sourceRoot":""}