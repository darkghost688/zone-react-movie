{"version":3,"sources":["models/public.js","services/request.js","config/uri.js","router/AdminRouter.jsx","hoc/checkLogin.js","views/admin/Admin.jsx"],"names":["model","normalLogin","params","axios","post","uri","NormalLogin","verifyCaptcha","VerifyCaptcha","sendSMS","SendSMSCode","smsLogin","SmsLogin","preCheckJwt","get","preCheck","getAdminInfo","adminInfo","interceptors","request","use","cfg","jwt","sessionStorage","getItem","headers","Authorization","response","res","data","context","setItem","prefix","userList","userPie","Dashboard","lazy","Userlist","AdminRouter","fallback","Loading","path","component","exact","from","to","chckLogin","Cmp","state","isLogin","isFinish","this","props","then","errNo","setState","Component","Header","Layout","Content","Footer","Sider","SubMenu","Menu","Admin","collapsed","selectedKeys","defaultOpenKeys","visible","urls","key","pkey","bread","last_login_addr","onCollapse","console","log","location","pathname","breads","forEach","el","style","minHeight","collapsible","className","src","width","alt","openKeys","theme","mode","onOpenChange","open","bind","Item","onClick","go","icon","DesktopOutlined","UserOutlined","title","TeamOutlined","FileOutlined","padding","color","username","role","last_ip","isp","cursor","logout","margin","map","item","index","textAlign","url","history","push","accountInfo","Modal","confirm","content","okText","cancelText","onOk","removeItem","checkLogin"],"mappings":"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","file":"static/js/7.f1109048.chunk.js","sourcesContent":["// 公共的模型文件\r\n// 作用：将对请求获取到的数据进行处理，使得原本应该写在组件中的代码转到这里，这样的话组件更加干净\r\n\r\n// 导入成员\r\nimport axios from \"@/services/request\";\r\nimport uri from \"@/config/uri\";\r\n\r\n// 定义模型中的方法\r\nconst model = {\r\n    // 常规登录方法\r\n    normalLogin(params) {\r\n        return axios.post(uri.NormalLogin, params);\r\n    },\r\n    // 图形验证码的验证\r\n    verifyCaptcha(params) {\r\n        return axios.post(uri.VerifyCaptcha, params);\r\n    },\r\n    // 短信获取\r\n    sendSMS(params) {\r\n        return axios.post(uri.SendSMSCode, params);\r\n    },\r\n    // 短信登录\r\n    smsLogin(params) {\r\n        return axios.post(uri.SmsLogin, params);\r\n    },\r\n    // jwt预检\r\n    preCheckJwt() {\r\n        return axios.get(uri.preCheck);\r\n    },\r\n    // 获取管理员信息\r\n    getAdminInfo() {\r\n        return axios.get(uri.adminInfo);\r\n    },\r\n};\r\n\r\nexport default model;\r\n","// 做网络请求发送的\r\nimport axios from \"axios\";\r\n\r\n// 请求拦截器\r\naxios.interceptors.request.use((cfg) => {\r\n    // 获取jwt\r\n    let jwt = sessionStorage.getItem(\"jwt\");\r\n    if (jwt) {\r\n        cfg.headers.Authorization = jwt;\r\n    }\r\n    return cfg;\r\n});\r\n\r\n// 响应拦截器\r\naxios.interceptors.response.use((res) => {\r\n    // 存token\r\n    if (res.data.context && res.data.context.jwt) {\r\n        sessionStorage.setItem(\"jwt\", res.data.context.jwt);\r\n    }\r\n    return res;\r\n});\r\n\r\n// 导出axios\r\nexport default axios;\r\n","let prefix = \"https://reactapi.iynn.cn\";\r\n\r\nconst uri = {\r\n    // 密码登录\r\n    NormalLogin: prefix + \"/api/common/auth/login\",\r\n    // 验证图形验证码\r\n    VerifyCaptcha: prefix + \"/api/common/captcha/verify\",\r\n    // 短信下发\r\n    SendSMSCode: prefix + \"/api/common/sms/send\",\r\n    // 短信登录\r\n    SmsLogin: prefix + \"/api/common/auth/mobile\",\r\n    // 验证jwt\r\n    preCheck: prefix + \"/api/common/auth/jwtPreCheck\",\r\n    // 管理员信息获取\r\n    adminInfo: prefix + \"/api/common/auth/adminInfo\",\r\n    // 用户模块，用户列表\r\n    userList: prefix + \"/api/users\",\r\n    // 用户模块，统计用户\r\n    userPie: prefix + \"/api/users/statistics/getData\",\r\n    // ...\r\n};\r\n\r\n// 地址声明\r\nexport default uri;\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\n// 导入组件\r\nimport Loading from \"@/components/Loading\";\r\nconst Dashboard = lazy(() => import(\"@/views/admin/home/Dashboard\"));\r\nconst Userlist = lazy(() => import(\"@/views/admin/user/List\"));\r\n// ...\r\n\r\nconst AdminRouter = () => {\r\n    return (\r\n        <Suspense fallback={<Loading />}>\r\n            <Switch>\r\n                <Route path=\"/admin/dashboard\" component={Dashboard} />\r\n                <Route path=\"/admin/user/list\" component={Userlist} />\r\n                {/* 当访问父组件，重定向到欢迎页 */}\r\n                <Redirect exact from=\"/admin\" to=\"/admin/dashboard\"/>\r\n            </Switch>\r\n        </Suspense>\r\n    );\r\n};\r\n\r\nexport default AdminRouter;\r\n","// HOC：高阶组件\r\nimport React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport model from \"@/models/public\";\r\nfunction chckLogin(Cmp) {\r\n    return class hoc_cmp extends Component {\r\n        state = {\r\n            // 是否有登录\r\n            isLogin: false,\r\n            // 是否请求结束\r\n            isFinish: false,\r\n        };\r\n\r\n        render() {\r\n            // props会丢失，需要在此携带原来的props\r\n            return <>{this.state.isFinish ? this.state.isLogin ? <Cmp {...this.props} /> : <Redirect to=\"/login\" /> : <div />}</>;\r\n        }\r\n\r\n        componentDidMount() {\r\n            // 获取jwt\r\n            let jwt = sessionStorage.getItem(\"jwt\");\r\n            if (jwt) {\r\n                // 初步认为已经登录（发送网络请求去校验jwt）\r\n                model.preCheckJwt().then((res) => {\r\n                    if (res.data.errNo === 0) {\r\n                        this.setState({\r\n                            isLogin: true,\r\n                            isFinish: true,\r\n                        });\r\n                    } else {\r\n                        this.setState({\r\n                            isLogin: false,\r\n                            isFinish: true,\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    isLogin: false,\r\n                    isFinish: true,\r\n                });\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default chckLogin;\r\n","// 后台布局组件\r\n// 后台所有的页面都需要使用它（父组件）\r\n// 将公共的内容（左侧的菜单、logo、顶部信息等等）写在该组件中\r\nimport React, { Component } from \"react\";\r\n// 导入父组件的路由\r\nimport AdminRouter from \"../../router/AdminRouter\";\r\nimport { Layout, Menu, Breadcrumb, Modal } from \"antd\";\r\nimport { DesktopOutlined, FileOutlined, TeamOutlined, UserOutlined } from \"@ant-design/icons\";\r\nimport checkLogin from \"@/hoc/checkLogin\";\r\nimport model from \"@/models/public\";\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nclass Admin extends Component {\r\n    state = {\r\n        collapsed: false,\r\n        selectedKeys: \"1\", // 默认选中的key\r\n        defaultOpenKeys: [],\r\n        visible: false, // 模态窗口的显示控制\r\n        urls: [\r\n            {\r\n                key: \"1\",\r\n                path: \"/admin/dashboard\",\r\n                pkey: \"\",\r\n                bread: [\"后台\", \"欢迎页\"],\r\n            },\r\n            {\r\n                key: \"sub1\",\r\n                path: \"\",\r\n                pkey: \"\",\r\n            },\r\n            {\r\n                key: \"2\",\r\n                path: \"/admin/user/list\",\r\n                pkey: \"sub1\",\r\n                bread: [\"后台\", \"用户管理\", \"用户列表\"],\r\n            },\r\n            {\r\n                key: \"sub2\",\r\n                path: \"\",\r\n                pkey: \"\",\r\n            },\r\n            {\r\n                key: \"3\",\r\n                path: \"/admin/film/list\",\r\n                pkey: \"sub2\",\r\n                bread: [\"后台\", \"电影管理\", \"电影列表\"],\r\n            },\r\n            {\r\n                key: \"4\",\r\n                path: \"/admin/cinema/list\",\r\n                pkey: \"\",\r\n                bread: [\"后台\", \"影院管理\", \"影院列表\"],\r\n            },\r\n        ],\r\n        adminInfo: {\r\n            last_login_addr: {},\r\n        },\r\n    };\r\n\r\n    onCollapse = (collapsed) => {\r\n        console.log(collapsed);\r\n        this.setState({ collapsed });\r\n    };\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        // 获取路径，为了获取具体地址对应的面包屑\r\n        let path = this.props.location.pathname;\r\n        let breads = [];\r\n        this.state.urls.forEach((el) => {\r\n            if (el.path === path) {\r\n                // 面包屑\r\n                breads = el.bread;\r\n            }\r\n        });\r\n        return (\r\n            <Layout style={{ minHeight: \"100vh\" }}>\r\n                <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n                    <div className=\"logo\">\r\n                        <img src=\"https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png\" width=\"100%\" alt=\"\" />\r\n                    </div>\r\n                    <Menu\r\n                        selectedKeys={this.state.selectedKeys}\r\n                        openKeys={this.state.defaultOpenKeys}\r\n                        theme=\"dark\"\r\n                        mode=\"inline\"\r\n                        onOpenChange={this.open.bind(this)}\r\n                    >\r\n                        <Menu.Item key=\"1\" onClick={this.go.bind(this, \"/admin/dashboard\", \"1\")} icon={<DesktopOutlined />}>\r\n                            主页\r\n                        </Menu.Item>\r\n                        <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"用户管理\">\r\n                            <Menu.Item onClick={this.go.bind(this, \"/admin/user/list\", \"2\")} key=\"2\">\r\n                                用户列表\r\n                            </Menu.Item>\r\n                        </SubMenu>\r\n                        <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"电影管理\">\r\n                            <Menu.Item onClick={this.go.bind(this, \"/admin/film/list\", \"3\")} key=\"3\">\r\n                                电影列表\r\n                            </Menu.Item>\r\n                        </SubMenu>\r\n                        <Menu.Item key=\"4\" onClick={this.go.bind(this, \"/admin/cinema/list\", \"4\")} icon={<FileOutlined />}>\r\n                            影院分布\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout className=\"site-layout\">\r\n                    <Header className=\"site-layout-background\" style={{ padding: 0, color: \"#fff\" }}>\r\n                        {/* 输出管理员基本信息 */}\r\n                        您好：{this.state.adminInfo.username}（{this.state.adminInfo.role}）！您上次于{this.state.adminInfo.last_ip}（\r\n                        {this.state.adminInfo.last_login_addr.state} - {this.state.adminInfo.last_login_addr.isp}）登录！[\r\n                        <span style={{ cursor: \"pointer\" }} onClick={this.logout.bind(this)}>\r\n                            注销登录\r\n                        </span>\r\n                        ]\r\n                    </Header>\r\n                    <Content style={{ margin: \"0 16px\" }}>\r\n                        <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n                            {breads.map((item, index) => {\r\n                                return <Breadcrumb.Item key={index}>{item}</Breadcrumb.Item>;\r\n                            })}\r\n                        </Breadcrumb>\r\n                        {/* 添加子路由的渲染容器 */}\r\n                        <div style={{ padding: 24, minHeight: 360 }}>\r\n                            <AdminRouter />\r\n                        </div>\r\n                    </Content>\r\n                    <Footer style={{ textAlign: \"center\" }}>©GP25 版权所有</Footer>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n    // 跳转\r\n    go(url, key) {\r\n        this.props.history.push(url);\r\n        // 修改选中的key\r\n        this.setState({\r\n            selectedKeys: key,\r\n        });\r\n    }\r\n\r\n    // 页面菜单选中展开的纠正（如果不刷新的话只走1次）\r\n    componentDidMount() {\r\n        // 获取路径，为了获取具体地址对应的面包屑\r\n        let path = this.props.location.pathname;\r\n        this.state.urls.forEach((el) => {\r\n            if (el.path === path) {\r\n                this.setState({\r\n                    defaultOpenKeys: [el.pkey],\r\n                    selectedKeys: el.key,\r\n                });\r\n            }\r\n        });\r\n        // 获取管理员信息\r\n        model.getAdminInfo().then((res) => {\r\n            this.setState({\r\n                adminInfo: res.data.accountInfo,\r\n            });\r\n        });\r\n    }\r\n\r\n    // 展开操作\r\n    open(key) {\r\n        this.setState({\r\n            defaultOpenKeys: [key[1]],\r\n        });\r\n    }\r\n\r\n    // 注销登录\r\n    logout() {\r\n        Modal.confirm({\r\n            title: \"操作确认\",\r\n            content: \"您确认注销本次登录吗？\",\r\n            okText: \"确认\",\r\n            cancelText: \"取消\",\r\n            onOk: () => {\r\n                // 清除jwt\r\n                sessionStorage.removeItem(\"jwt\");\r\n                // 跳转到登录页面\r\n                this.props.history.push(\"/login\");\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\nexport default checkLogin(Admin);\r\n"],"sourceRoot":""}